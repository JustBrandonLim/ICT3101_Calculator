// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowCalculatorTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UsingCalculatorLogarithmicReliability")]
    public partial class UsingCalculatorLogarithmicReliabilityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "UsingCalculatorLogarithmicReliability.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "UsingCalculatorLogarithmicReliability", "Allow system quality engineers to customize the command line calulator program to" +
                    " perform quality metric calculations, \r\ncalculating the defect density of a syst" +
                    "em, custom calculate Shipped Source Instructions (SSI) from 2nd release onwards," +
                    " \r\ncalculate Musa Logarithmic model failure intensity and to calculate the numbe" +
                    "r of expected failures\r\n\r\n\r\nAllow system quality engineers to customize the comm" +
                    "and line calulator program to perform quality metric calculations\r\nAllow system " +
                    "quality engineers to calculate the defect density of a system\r\nAllow system qual" +
                    "ity engineers to custom calculate Shipped Source Instructions (SSI) from 2nd rel" +
                    "ease onwards\r\nAllow system quality engineers to calculate Musa Logarithmic model" +
                    " failure intensity\r\nAllow system quality engineers to calculate the Musa Logarit" +
                    "hmic model number of expected failures\r\n\r\nAs a system quality engineers\r\nI want " +
                    "to be able to customize the command line calulator program \r\nso that i can perfo" +
                    "rm quality metric calculations\r\n\r\nAs a system quality engineers\r\nI want to to cu" +
                    "stomize the command line calulator program \r\nso that i can calculate the defect " +
                    "density of a system\r\n\r\nAs a system quality engineers\r\nI want to to customize the" +
                    " command line calulator program \r\nso that i can custom calculate Shipped Source " +
                    "Instructions (SSI) from 2nd release onwards\r\n\r\nAs a system quality engineers\r\nI " +
                    "want to to customize the command line calulator program \r\nso that i can calculat" +
                    "e Musa Logarithmic model failure intensity\r\n\r\nAs a system quality engineers\r\nI w" +
                    "ant to to customize the command line calulator program \r\nso that i can calculate" +
                    " the Musa Logarithmic model number of expected failures", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate Defect Density")]
        [NUnit.Framework.CategoryAttribute("LogarithmicReliability")]
        public void CalculateDefectDensity()
        {
            string[] tagsOfScenario = new string[] {
                    "LogarithmicReliability"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate Defect Density", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
 testRunner.Given("I have a calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
 testRunner.When("I enter 100 defects and 50 KLOC and press Defect Density", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.Then("the Defect Density result should be 2 defects/KLOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate SSI")]
        [NUnit.Framework.CategoryAttribute("LogarithmicReliability")]
        public void CalculateSSI()
        {
            string[] tagsOfScenario = new string[] {
                    "LogarithmicReliability"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate SSI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
 testRunner.Given("I have a calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
 testRunner.When("I enter 50 KLOC for previous SSI and 30 KLOC for CSI and 10 KLOC for deleted code" +
                        " and 10 KLOC for changed code and press SSI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
 testRunner.Then("the current SSI result is 60 KLOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate logarithmic Failure Intensity")]
        [NUnit.Framework.CategoryAttribute("LogarithmicReliability")]
        public void CalculateLogarithmicFailureIntensity()
        {
            string[] tagsOfScenario = new string[] {
                    "LogarithmicReliability"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate logarithmic Failure Intensity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
 testRunner.Given("I have a calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.When("I enter 0.02 for failure intensity decay and 10 for the failure intesity and 50 f" +
                        "or the expected numebr of failures and press Failure intensity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
 testRunner.Then("the Failure Intensity result should be 3.68", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate Expected Failure")]
        [NUnit.Framework.CategoryAttribute("LogarithmicReliability")]
        public void CalculateExpectedFailure()
        {
            string[] tagsOfScenario = new string[] {
                    "LogarithmicReliability"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate Expected Failure", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 55
 testRunner.Given("I have a calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
 testRunner.When("I enter 0.02 for failure intensity decay and 10 for the failure intesity and 10 f" +
                        "or number of CPU hours and press Failure intensity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.Then("the Expected Failure result should be 55", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
